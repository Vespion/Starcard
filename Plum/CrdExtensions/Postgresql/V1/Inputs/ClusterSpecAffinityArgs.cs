// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Postgresql.V1
{

    /// <summary>
    /// Affinity/Anti-affinity rules for Pods
    /// </summary>
    public class ClusterSpecAffinityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
        /// </summary>
        [Input("additionalPodAffinity")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodaffinityArgs>? AdditionalPodAffinity { get; set; }

        /// <summary>
        /// AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
        /// </summary>
        [Input("additionalPodAntiAffinity")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodantiaffinityArgs>? AdditionalPodAntiAffinity { get; set; }

        /// <summary>
        /// Activates anti-affinity for the pods. The operator will define pods anti-affinity unless this field is explicitly set to false
        /// </summary>
        [Input("enablePodAntiAffinity")]
        public Input<bool>? EnablePodAntiAffinity { get; set; }

        /// <summary>
        /// NodeAffinity describes node affinity scheduling rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
        /// </summary>
        [Input("nodeAffinity")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityNodeaffinityArgs>? NodeAffinity { get; set; }

        [Input("nodeSelector")]
        private InputMap<string>? _nodeSelector;

        /// <summary>
        /// NodeSelector is map of key-value pairs used to define the nodes on which the pods can run. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        /// </summary>
        public InputMap<string> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<string>());
            set => _nodeSelector = value;
        }

        /// <summary>
        /// PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are added if all the existing nodes don't match the required pod anti-affinity rule. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        /// </summary>
        [Input("podAntiAffinityType")]
        public Input<string>? PodAntiAffinityType { get; set; }

        [Input("tolerations")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityTolerationsArgs>? _tolerations;

        /// <summary>
        /// Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run on tainted nodes. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityTolerationsArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Pulumi.Kubernetes.Types.Inputs.Postgresql.V1.ClusterSpecAffinityTolerationsArgs>());
            set => _tolerations = value;
        }

        /// <summary>
        /// TopologyKey to use for anti-affinity configuration. See k8s documentation for more info on that
        /// </summary>
        [Input("topologyKey")]
        public Input<string>? TopologyKey { get; set; }

        public ClusterSpecAffinityArgs()
        {
        }
        public static new ClusterSpecAffinityArgs Empty => new ClusterSpecAffinityArgs();
    }
}
