// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Postgresql.V1
{

    /// <summary>
    /// The configuration to be used to backup the data files When not defined, base backups files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
    /// </summary>
    [OutputType]
    public sealed class ClusterSpecBackupBarmanobjectstoreData
    {
        /// <summary>
        /// Compress a backup file (a tar file per tablespace) while streaming it to the object store. Available options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
        /// </summary>
        public readonly string Compression;
        /// <summary>
        /// Whenever to force the encryption of files (if the bucket is not already configured for that). Allowed options are empty string (use the bucket policy, default), `AES256` and `aws:kms`
        /// </summary>
        public readonly string Encryption;
        /// <summary>
        /// Control whether the I/O workload for the backup initial checkpoint will be limited, according to the `checkpoint_completion_target` setting on the PostgreSQL server. If set to true, an immediate checkpoint will be used, meaning PostgreSQL will complete the checkpoint as soon as possible. `false` by default.
        /// </summary>
        public readonly bool ImmediateCheckpoint;
        /// <summary>
        /// The number of parallel jobs to be used to upload the backup, defaults to 2
        /// </summary>
        public readonly int Jobs;

        [OutputConstructor]
        private ClusterSpecBackupBarmanobjectstoreData(
            string compression,

            string encryption,

            bool immediateCheckpoint,

            int jobs)
        {
            Compression = compression;
            Encryption = encryption;
            ImmediateCheckpoint = immediateCheckpoint;
            Jobs = jobs;
        }
    }
}
