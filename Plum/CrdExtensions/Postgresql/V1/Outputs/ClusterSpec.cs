// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Postgresql.V1
{

    /// <summary>
    /// Specification of the desired behavior of the cluster. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    /// </summary>
    [OutputType]
    public sealed class ClusterSpec
    {
        /// <summary>
        /// Affinity/Anti-affinity rules for Pods
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinity Affinity;
        /// <summary>
        /// The configuration to be used for backups
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBackup Backup;
        /// <summary>
        /// Instructions to bootstrap this cluster
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBootstrap Bootstrap;
        /// <summary>
        /// The configuration for the CA and related certificates
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecCertificates Certificates;
        /// <summary>
        /// Description of this PostgreSQL cluster
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// When this option is enabled, the operator will use the `SuperuserSecret` to update the `postgres` user password (if the secret is not present, the operator will automatically create one). When this option is disabled, the operator will ignore the `SuperuserSecret` content, delete it when automatically created, and then blank the password of the `postgres` user by setting it to `NULL`. Enabled by default.
        /// </summary>
        public readonly bool EnableSuperuserAccess;
        /// <summary>
        /// Env follows the Env format to pass environment variables to the pods created in the cluster
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecEnv> Env;
        /// <summary>
        /// EnvFrom follows the EnvFrom format to pass environment variables sources to the pods to be used by Env
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecEnvfrom> EnvFrom;
        /// <summary>
        /// The list of external clusters which are used in the configuration
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecExternalclusters> ExternalClusters;
        /// <summary>
        /// The amount of time (in seconds) to wait before triggering a failover after the primary PostgreSQL instance in the cluster was detected to be unhealthy
        /// </summary>
        public readonly int FailoverDelay;
        /// <summary>
        /// Name of the container image, supporting both tags (`&lt;image&gt;:&lt;tag&gt;`) and digests for deterministic and repeatable deployments (`&lt;image&gt;:&lt;tag&gt;@sha256:&lt;digestValue&gt;`)
        /// </summary>
        public readonly string ImageName;
        /// <summary>
        /// Image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        /// </summary>
        public readonly string ImagePullPolicy;
        /// <summary>
        /// The list of pull secrets to be used to pull the images
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecImagepullsecrets> ImagePullSecrets;
        /// <summary>
        /// Metadata that will be inherited by all objects related to the Cluster
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecInheritedmetadata InheritedMetadata;
        /// <summary>
        /// Number of instances required in the cluster
        /// </summary>
        public readonly int Instances;
        /// <summary>
        /// The instances' log level, one of the following values: error, warning, info (default), debug, trace
        /// </summary>
        public readonly string LogLevel;
        /// <summary>
        /// The target value for the synchronous replication quorum, that can be decreased if the number of ready standbys is lower than this. Undefined or 0 disable synchronous replication.
        /// </summary>
        public readonly int MaxSyncReplicas;
        /// <summary>
        /// Minimum number of instances required in synchronous replication with the primary. Undefined or 0 allow writes to complete when no standby is available.
        /// </summary>
        public readonly int MinSyncReplicas;
        /// <summary>
        /// The configuration of the monitoring infrastructure of this cluster
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecMonitoring Monitoring;
        /// <summary>
        /// Define a maintenance window for the Kubernetes nodes
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecNodemaintenancewindow NodeMaintenanceWindow;
        /// <summary>
        /// The GID of the `postgres` user inside the image, defaults to `26`
        /// </summary>
        public readonly int PostgresGID;
        /// <summary>
        /// The UID of the `postgres` user inside the image, defaults to `26`
        /// </summary>
        public readonly int PostgresUID;
        /// <summary>
        /// Configuration of the PostgreSQL server
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecPostgresql Postgresql;
        /// <summary>
        /// Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been successfully updated: it can be with a switchover (`switchover` - default) or in-place (`restart`)
        /// </summary>
        public readonly string PrimaryUpdateMethod;
        /// <summary>
        /// Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been successfully updated: it can be automated (`unsupervised` - default) or manual (`supervised`)
        /// </summary>
        public readonly string PrimaryUpdateStrategy;
        /// <summary>
        /// Template to be used to define projected volumes, projected volumes will be mounted under `/projected` base folder
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecProjectedvolumetemplate ProjectedVolumeTemplate;
        /// <summary>
        /// Replica cluster configuration
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecReplica Replica;
        /// <summary>
        /// Replication slots management configuration
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecReplicationslots ReplicationSlots;
        /// <summary>
        /// Resources requirements of every generated Pod. Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecResources Resources;
        /// <summary>
        /// Configure the generation of the service account
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecServiceaccounttemplate ServiceAccountTemplate;
        /// <summary>
        /// The time in seconds that is allowed for a PostgreSQL instance to successfully start up (default 30)
        /// </summary>
        public readonly int StartDelay;
        /// <summary>
        /// The time in seconds that is allowed for a PostgreSQL instance to gracefully shutdown (default 30)
        /// </summary>
        public readonly int StopDelay;
        /// <summary>
        /// Configuration of the storage of the instances
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecStorage Storage;
        /// <summary>
        /// The secret containing the superuser password. If not defined a new secret will be created with a randomly generated password
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecSuperusersecret SuperuserSecret;
        /// <summary>
        /// The time in seconds that is allowed for a primary PostgreSQL instance to gracefully shutdown during a switchover. Default value is 40000000, greater than one year in seconds, big enough to simulate an infinite delay
        /// </summary>
        public readonly int SwitchoverDelay;
        /// <summary>
        /// Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecWalstorage WalStorage;

        [OutputConstructor]
        private ClusterSpec(
            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinity affinity,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBackup backup,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBootstrap bootstrap,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecCertificates certificates,

            string description,

            bool enableSuperuserAccess,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecEnv> env,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecEnvfrom> envFrom,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecExternalclusters> externalClusters,

            int failoverDelay,

            string imageName,

            string imagePullPolicy,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecImagepullsecrets> imagePullSecrets,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecInheritedmetadata inheritedMetadata,

            int instances,

            string logLevel,

            int maxSyncReplicas,

            int minSyncReplicas,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecMonitoring monitoring,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecNodemaintenancewindow nodeMaintenanceWindow,

            int postgresGID,

            int postgresUID,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecPostgresql postgresql,

            string primaryUpdateMethod,

            string primaryUpdateStrategy,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecProjectedvolumetemplate projectedVolumeTemplate,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecReplica replica,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecReplicationslots replicationSlots,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecResources resources,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecServiceaccounttemplate serviceAccountTemplate,

            int startDelay,

            int stopDelay,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecStorage storage,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecSuperusersecret superuserSecret,

            int switchoverDelay,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecWalstorage walStorage)
        {
            Affinity = affinity;
            Backup = backup;
            Bootstrap = bootstrap;
            Certificates = certificates;
            Description = description;
            EnableSuperuserAccess = enableSuperuserAccess;
            Env = env;
            EnvFrom = envFrom;
            ExternalClusters = externalClusters;
            FailoverDelay = failoverDelay;
            ImageName = imageName;
            ImagePullPolicy = imagePullPolicy;
            ImagePullSecrets = imagePullSecrets;
            InheritedMetadata = inheritedMetadata;
            Instances = instances;
            LogLevel = logLevel;
            MaxSyncReplicas = maxSyncReplicas;
            MinSyncReplicas = minSyncReplicas;
            Monitoring = monitoring;
            NodeMaintenanceWindow = nodeMaintenanceWindow;
            PostgresGID = postgresGID;
            PostgresUID = postgresUID;
            Postgresql = postgresql;
            PrimaryUpdateMethod = primaryUpdateMethod;
            PrimaryUpdateStrategy = primaryUpdateStrategy;
            ProjectedVolumeTemplate = projectedVolumeTemplate;
            Replica = replica;
            ReplicationSlots = replicationSlots;
            Resources = resources;
            ServiceAccountTemplate = serviceAccountTemplate;
            StartDelay = startDelay;
            StopDelay = stopDelay;
            Storage = storage;
            SuperuserSecret = superuserSecret;
            SwitchoverDelay = switchoverDelay;
            WalStorage = walStorage;
        }
    }
}
