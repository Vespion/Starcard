// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Postgresql.V1
{

    /// <summary>
    /// Bootstraps the new cluster by importing data from an existing PostgreSQL instance using logical backup (`pg_dump` and `pg_restore`)
    /// </summary>
    [OutputType]
    public sealed class ClusterSpecBootstrapInitdbImport
    {
        /// <summary>
        /// The databases to import
        /// </summary>
        public readonly ImmutableArray<string> Databases;
        /// <summary>
        /// List of SQL queries to be executed as a superuser in the application database right after is imported - to be used with extreme care (by default empty). Only available in microservice type.
        /// </summary>
        public readonly ImmutableArray<string> PostImportApplicationSQL;
        /// <summary>
        /// The roles to import
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// The source of the import
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBootstrapInitdbImportSource Source;
        /// <summary>
        /// The import type. Can be `microservice` or `monolith`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ClusterSpecBootstrapInitdbImport(
            ImmutableArray<string> databases,

            ImmutableArray<string> postImportApplicationSQL,

            ImmutableArray<string> roles,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecBootstrapInitdbImportSource source,

            string type)
        {
            Databases = databases;
            PostImportApplicationSQL = postImportApplicationSQL;
            Roles = roles;
            Source = source;
            Type = type;
        }
    }
}
