// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Postgresql.V1
{

    /// <summary>
    /// Affinity/Anti-affinity rules for Pods
    /// </summary>
    [OutputType]
    public sealed class ClusterSpecAffinity
    {
        /// <summary>
        /// AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodaffinity AdditionalPodAffinity;
        /// <summary>
        /// AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodantiaffinity AdditionalPodAntiAffinity;
        /// <summary>
        /// Activates anti-affinity for the pods. The operator will define pods anti-affinity unless this field is explicitly set to false
        /// </summary>
        public readonly bool EnablePodAntiAffinity;
        /// <summary>
        /// NodeAffinity describes node affinity scheduling rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityNodeaffinity NodeAffinity;
        /// <summary>
        /// NodeSelector is map of key-value pairs used to define the nodes on which the pods can run. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        /// </summary>
        public readonly ImmutableDictionary<string, string> NodeSelector;
        /// <summary>
        /// PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are added if all the existing nodes don't match the required pod anti-affinity rule. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
        /// </summary>
        public readonly string PodAntiAffinityType;
        /// <summary>
        /// Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run on tainted nodes. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityTolerations> Tolerations;
        /// <summary>
        /// TopologyKey to use for anti-affinity configuration. See k8s documentation for more info on that
        /// </summary>
        public readonly string TopologyKey;

        [OutputConstructor]
        private ClusterSpecAffinity(
            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodaffinity additionalPodAffinity,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityAdditionalpodantiaffinity additionalPodAntiAffinity,

            bool enablePodAntiAffinity,

            Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityNodeaffinity nodeAffinity,

            ImmutableDictionary<string, string> nodeSelector,

            string podAntiAffinityType,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Postgresql.V1.ClusterSpecAffinityTolerations> tolerations,

            string topologyKey)
        {
            AdditionalPodAffinity = additionalPodAffinity;
            AdditionalPodAntiAffinity = additionalPodAntiAffinity;
            EnablePodAntiAffinity = enablePodAntiAffinity;
            NodeAffinity = nodeAffinity;
            NodeSelector = nodeSelector;
            PodAntiAffinityType = podAntiAffinityType;
            Tolerations = tolerations;
            TopologyKey = topologyKey;
        }
    }
}
