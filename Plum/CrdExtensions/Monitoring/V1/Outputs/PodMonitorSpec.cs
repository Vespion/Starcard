// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Monitoring.V1
{

    /// <summary>
    /// Specification of desired Pod selection for target discovery by Prometheus.
    /// </summary>
    [OutputType]
    public sealed class PodMonitorSpec
    {
        /// <summary>
        /// Attaches node metadata to discovered targets. Requires Prometheus v2.35.0 and above.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecAttachmetadata AttachMetadata;
        /// <summary>
        /// The label to use to retrieve the job name from.
        /// </summary>
        public readonly string JobLabel;
        /// <summary>
        /// Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelLimit;
        /// <summary>
        /// Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelNameLengthLimit;
        /// <summary>
        /// Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelValueLengthLimit;
        /// <summary>
        /// Selector to select which namespaces the Endpoints objects are discovered from.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecNamespaceselector NamespaceSelector;
        /// <summary>
        /// A list of endpoints allowed as part of this PodMonitor.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecPodmetricsendpoints> PodMetricsEndpoints;
        /// <summary>
        /// PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
        /// </summary>
        public readonly ImmutableArray<string> PodTargetLabels;
        /// <summary>
        /// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
        /// </summary>
        public readonly int SampleLimit;
        /// <summary>
        /// Selector to select Pod objects.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecSelector Selector;
        /// <summary>
        /// TargetLimit defines a limit on the number of scraped targets that will be accepted.
        /// </summary>
        public readonly int TargetLimit;

        [OutputConstructor]
        private PodMonitorSpec(
            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecAttachmetadata attachMetadata,

            string jobLabel,

            int labelLimit,

            int labelNameLengthLimit,

            int labelValueLengthLimit,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecNamespaceselector namespaceSelector,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecPodmetricsendpoints> podMetricsEndpoints,

            ImmutableArray<string> podTargetLabels,

            int sampleLimit,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.PodMonitorSpecSelector selector,

            int targetLimit)
        {
            AttachMetadata = attachMetadata;
            JobLabel = jobLabel;
            LabelLimit = labelLimit;
            LabelNameLengthLimit = labelNameLengthLimit;
            LabelValueLengthLimit = labelValueLengthLimit;
            NamespaceSelector = namespaceSelector;
            PodMetricsEndpoints = podMetricsEndpoints;
            PodTargetLabels = podTargetLabels;
            SampleLimit = sampleLimit;
            Selector = selector;
            TargetLimit = targetLimit;
        }
    }
}
