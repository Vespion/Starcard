// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;

namespace Pulumi.Kubernetes.Types.Outputs.Monitoring.V1
{

    /// <summary>
    /// Specification of desired Ingress selection for target discovery by Prometheus.
    /// </summary>
    [OutputType]
    public sealed class ProbeSpec
    {
        /// <summary>
        /// Authorization section for this endpoint
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecAuthorization Authorization;
        /// <summary>
        /// BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecBasicauth BasicAuth;
        /// <summary>
        /// Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecBearertokensecret BearerTokenSecret;
        /// <summary>
        /// Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.
        /// </summary>
        public readonly string Interval;
        /// <summary>
        /// The job name assigned to scraped metrics by default.
        /// </summary>
        public readonly string JobName;
        /// <summary>
        /// Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelLimit;
        /// <summary>
        /// Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelNameLengthLimit;
        /// <summary>
        /// Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly int LabelValueLengthLimit;
        /// <summary>
        /// MetricRelabelConfigs to apply to samples before ingestion.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecMetricrelabelings> MetricRelabelings;
        /// <summary>
        /// The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml
        /// </summary>
        public readonly string Module;
        /// <summary>
        /// OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecOauth2 Oauth2;
        /// <summary>
        /// Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecProber Prober;
        /// <summary>
        /// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
        /// </summary>
        public readonly int SampleLimit;
        /// <summary>
        /// Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.
        /// </summary>
        public readonly string ScrapeTimeout;
        /// <summary>
        /// TargetLimit defines a limit on the number of scraped targets that will be accepted.
        /// </summary>
        public readonly int TargetLimit;
        /// <summary>
        /// Targets defines a set of static or dynamically discovered targets to probe.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecTargets Targets;
        /// <summary>
        /// TLS configuration to use when scraping the endpoint.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecTlsconfig TlsConfig;

        [OutputConstructor]
        private ProbeSpec(
            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecAuthorization authorization,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecBasicauth basicAuth,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecBearertokensecret bearerTokenSecret,

            string interval,

            string jobName,

            int labelLimit,

            int labelNameLengthLimit,

            int labelValueLengthLimit,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecMetricrelabelings> metricRelabelings,

            string module,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecOauth2 oauth2,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecProber prober,

            int sampleLimit,

            string scrapeTimeout,

            int targetLimit,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecTargets targets,

            Pulumi.Kubernetes.Types.Outputs.Monitoring.V1.ProbeSpecTlsconfig tlsConfig)
        {
            Authorization = authorization;
            BasicAuth = basicAuth;
            BearerTokenSecret = bearerTokenSecret;
            Interval = interval;
            JobName = jobName;
            LabelLimit = labelLimit;
            LabelNameLengthLimit = labelNameLengthLimit;
            LabelValueLengthLimit = labelValueLengthLimit;
            MetricRelabelings = metricRelabelings;
            Module = module;
            Oauth2 = oauth2;
            Prober = prober;
            SampleLimit = sampleLimit;
            ScrapeTimeout = scrapeTimeout;
            TargetLimit = targetLimit;
            Targets = targets;
            TlsConfig = tlsConfig;
        }
    }
}
