// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// The plugin supports the following conditions
    /// </summary>
    public class ClusterFilterSpecFiltersModifyConditionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is true if a key matches regex KEY
        /// </summary>
        [Input("aKeyMatches")]
        public Input<string>? AKeyMatches { get; set; }

        [Input("keyDoesNotExist")]
        private InputMap<string>? _keyDoesNotExist;

        /// <summary>
        /// Is true if KEY does not exist
        /// </summary>
        public InputMap<string> KeyDoesNotExist
        {
            get => _keyDoesNotExist ?? (_keyDoesNotExist = new InputMap<string>());
            set => _keyDoesNotExist = value;
        }

        /// <summary>
        /// Is true if KEY exists
        /// </summary>
        [Input("keyExists")]
        public Input<string>? KeyExists { get; set; }

        [Input("keyValueDoesNotEqual")]
        private InputMap<string>? _keyValueDoesNotEqual;

        /// <summary>
        /// Is true if KEY exists and its value is not VALUE
        /// </summary>
        public InputMap<string> KeyValueDoesNotEqual
        {
            get => _keyValueDoesNotEqual ?? (_keyValueDoesNotEqual = new InputMap<string>());
            set => _keyValueDoesNotEqual = value;
        }

        [Input("keyValueDoesNotMatch")]
        private InputMap<string>? _keyValueDoesNotMatch;

        /// <summary>
        /// Is true if key KEY exists and its value does not match VALUE
        /// </summary>
        public InputMap<string> KeyValueDoesNotMatch
        {
            get => _keyValueDoesNotMatch ?? (_keyValueDoesNotMatch = new InputMap<string>());
            set => _keyValueDoesNotMatch = value;
        }

        [Input("keyValueEquals")]
        private InputMap<string>? _keyValueEquals;

        /// <summary>
        /// Is true if KEY exists and its value is VALUE
        /// </summary>
        public InputMap<string> KeyValueEquals
        {
            get => _keyValueEquals ?? (_keyValueEquals = new InputMap<string>());
            set => _keyValueEquals = value;
        }

        [Input("keyValueMatches")]
        private InputMap<string>? _keyValueMatches;

        /// <summary>
        /// Is true if key KEY exists and its value matches VALUE
        /// </summary>
        public InputMap<string> KeyValueMatches
        {
            get => _keyValueMatches ?? (_keyValueMatches = new InputMap<string>());
            set => _keyValueMatches = value;
        }

        [Input("matchingKeysDoNotHaveMatchingValues")]
        private InputMap<string>? _matchingKeysDoNotHaveMatchingValues;

        /// <summary>
        /// Is true if all keys matching KEY have values that do not match VALUE
        /// </summary>
        public InputMap<string> MatchingKeysDoNotHaveMatchingValues
        {
            get => _matchingKeysDoNotHaveMatchingValues ?? (_matchingKeysDoNotHaveMatchingValues = new InputMap<string>());
            set => _matchingKeysDoNotHaveMatchingValues = value;
        }

        [Input("matchingKeysHaveMatchingValues")]
        private InputMap<string>? _matchingKeysHaveMatchingValues;

        /// <summary>
        /// Is true if all keys matching KEY have values that match VALUE
        /// </summary>
        public InputMap<string> MatchingKeysHaveMatchingValues
        {
            get => _matchingKeysHaveMatchingValues ?? (_matchingKeysHaveMatchingValues = new InputMap<string>());
            set => _matchingKeysHaveMatchingValues = value;
        }

        /// <summary>
        /// Is true if no key matches regex KEY
        /// </summary>
        [Input("noKeyMatches")]
        public Input<string>? NoKeyMatches { get; set; }

        public ClusterFilterSpecFiltersModifyConditionsArgs()
        {
        }
        public static new ClusterFilterSpecFiltersModifyConditionsArgs Empty => new ClusterFilterSpecFiltersModifyConditionsArgs();
    }
}
