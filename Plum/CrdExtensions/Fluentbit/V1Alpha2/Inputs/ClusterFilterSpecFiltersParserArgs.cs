// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Parser defines Parser Filter configuration.
    /// </summary>
    public class ClusterFilterSpecFiltersParserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias for the plugin
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Specify field name in record to parse.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Specify the parser name to interpret the field. Multiple Parser entries are allowed (split by comma).
        /// </summary>
        [Input("parser")]
        public Input<string>? Parser { get; set; }

        /// <summary>
        /// Keep original Key_Name field in the parsed result. If false, the field will be removed.
        /// </summary>
        [Input("preserveKey")]
        public Input<bool>? PreserveKey { get; set; }

        /// <summary>
        /// Keep all other original fields in the parsed result. If false, all other original fields will be removed.
        /// </summary>
        [Input("reserveData")]
        public Input<bool>? ReserveData { get; set; }

        /// <summary>
        /// RetryLimit describes how many times fluent-bit should retry to send data to a specific output. If set to false fluent-bit will try indefinetly. If set to any integer N&gt;0 it will try at most N+1 times. Leading zeros are not allowed (values such as 007, 0150, 01 do not work). If this property is not defined fluent-bit will use the default value: 1.
        /// </summary>
        [Input("retryLimit")]
        public Input<string>? RetryLimit { get; set; }

        /// <summary>
        /// If the key is a escaped string (e.g: stringify JSON), unescape the string before to apply the parser.
        /// </summary>
        [Input("unescapeKey")]
        public Input<bool>? UnescapeKey { get; set; }

        public ClusterFilterSpecFiltersParserArgs()
        {
        }
        public static new ClusterFilterSpecFiltersParserArgs Empty => new ClusterFilterSpecFiltersParserArgs();
    }
}
