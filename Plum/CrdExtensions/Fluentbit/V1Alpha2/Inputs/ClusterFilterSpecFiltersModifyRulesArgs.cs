// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// The plugin supports the following rules
    /// </summary>
    public class ClusterFilterSpecFiltersModifyRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("add")]
        private InputMap<string>? _add;

        /// <summary>
        /// Add a key/value pair with key KEY and value VALUE if KEY does not exist
        /// </summary>
        public InputMap<string> Add
        {
            get => _add ?? (_add = new InputMap<string>());
            set => _add = value;
        }

        [Input("copy")]
        private InputMap<string>? _copy;

        /// <summary>
        /// Copy a key/value pair with key KEY to COPIED_KEY if KEY exists AND COPIED_KEY does not exist
        /// </summary>
        public InputMap<string> Copy
        {
            get => _copy ?? (_copy = new InputMap<string>());
            set => _copy = value;
        }

        [Input("hardCopy")]
        private InputMap<string>? _hardCopy;

        /// <summary>
        /// Copy a key/value pair with key KEY to COPIED_KEY if KEY exists. If COPIED_KEY already exists, this field is overwritten
        /// </summary>
        public InputMap<string> HardCopy
        {
            get => _hardCopy ?? (_hardCopy = new InputMap<string>());
            set => _hardCopy = value;
        }

        [Input("hardRename")]
        private InputMap<string>? _hardRename;

        /// <summary>
        /// Rename a key/value pair with key KEY to RENAMED_KEY if KEY exists. If RENAMED_KEY already exists, this field is overwritten
        /// </summary>
        public InputMap<string> HardRename
        {
            get => _hardRename ?? (_hardRename = new InputMap<string>());
            set => _hardRename = value;
        }

        /// <summary>
        /// Remove a key/value pair with key KEY if it exists
        /// </summary>
        [Input("remove")]
        public Input<string>? Remove { get; set; }

        /// <summary>
        /// Remove all key/value pairs with key matching regexp KEY
        /// </summary>
        [Input("removeRegex")]
        public Input<string>? RemoveRegex { get; set; }

        /// <summary>
        /// Remove all key/value pairs with key matching wildcard KEY
        /// </summary>
        [Input("removeWildcard")]
        public Input<string>? RemoveWildcard { get; set; }

        [Input("rename")]
        private InputMap<string>? _rename;

        /// <summary>
        /// Rename a key/value pair with key KEY to RENAMED_KEY if KEY exists AND RENAMED_KEY does not exist
        /// </summary>
        public InputMap<string> Rename
        {
            get => _rename ?? (_rename = new InputMap<string>());
            set => _rename = value;
        }

        [Input("set")]
        private InputMap<string>? _set;

        /// <summary>
        /// Add a key/value pair with key KEY and value VALUE. If KEY already exists, this field is overwritten
        /// </summary>
        public InputMap<string> Set
        {
            get => _set ?? (_set = new InputMap<string>());
            set => _set = value;
        }

        public ClusterFilterSpecFiltersModifyRulesArgs()
        {
        }
        public static new ClusterFilterSpecFiltersModifyRulesArgs Empty => new ClusterFilterSpecFiltersModifyRulesArgs();
    }
}
