// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Throttle defines a Throttle configuration.
    /// </summary>
    public class ClusterFilterSpecFiltersThrottleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alias for the plugin
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Interval is the time interval expressed in "sleep" format. e.g. 3s, 1.5m, 0.5h, etc.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// PrintStatus represents whether to print status messages with current rate and the limits to information logs.
        /// </summary>
        [Input("printStatus")]
        public Input<bool>? PrintStatus { get; set; }

        /// <summary>
        /// Rate is the amount of messages for the time.
        /// </summary>
        [Input("rate")]
        public Input<int>? Rate { get; set; }

        /// <summary>
        /// RetryLimit describes how many times fluent-bit should retry to send data to a specific output. If set to false fluent-bit will try indefinetly. If set to any integer N&gt;0 it will try at most N+1 times. Leading zeros are not allowed (values such as 007, 0150, 01 do not work). If this property is not defined fluent-bit will use the default value: 1.
        /// </summary>
        [Input("retryLimit")]
        public Input<string>? RetryLimit { get; set; }

        /// <summary>
        /// Window is the amount of intervals to calculate average over.
        /// </summary>
        [Input("window")]
        public Input<int>? Window { get; set; }

        public ClusterFilterSpecFiltersThrottleArgs()
        {
        }
        public static new ClusterFilterSpecFiltersThrottleArgs Empty => new ClusterFilterSpecFiltersThrottleArgs();
    }
}
