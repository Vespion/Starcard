// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Splunk defines Splunk Output Configuration
    /// </summary>
    public class ClusterOutputSpecSplunkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables dedicated thread(s) for this output. Default value `2` is set since version 1.8.13. For previous versions is 0.
        /// </summary>
        [Input("Workers")]
        public Input<int>? Workers { get; set; }

        /// <summary>
        /// Specify X-Splunk-Request-Channel Header for the HTTP Event Collector interface.
        /// </summary>
        [Input("channel")]
        public Input<string>? Channel { get; set; }

        /// <summary>
        /// Set payload compression mechanism. The only available option is gzip.
        /// </summary>
        [Input("compress")]
        public Input<string>? Compress { get; set; }

        [Input("eventFields")]
        private InputList<string>? _eventFields;

        /// <summary>
        /// Set event fields for the record. This option is an array and the format is "key_name record_accessor_pattern".
        /// </summary>
        public InputList<string> EventFields
        {
            get => _eventFields ?? (_eventFields = new InputList<string>());
            set => _eventFields = value;
        }

        /// <summary>
        /// Specify the key name that contains the host value. This option allows a record accessors pattern.
        /// </summary>
        [Input("eventHost")]
        public Input<string>? EventHost { get; set; }

        /// <summary>
        /// The name of the index by which the event data is to be indexed.
        /// </summary>
        [Input("eventIndex")]
        public Input<string>? EventIndex { get; set; }

        /// <summary>
        /// Set a record key that will populate the index field. If the key is found, it will have precedence over the value set in event_index.
        /// </summary>
        [Input("eventIndexKey")]
        public Input<string>? EventIndexKey { get; set; }

        /// <summary>
        /// Specify the key name that will be used to send a single value as part of the record.
        /// </summary>
        [Input("eventKey")]
        public Input<string>? EventKey { get; set; }

        /// <summary>
        /// Set the source value to assign to the event data.
        /// </summary>
        [Input("eventSource")]
        public Input<string>? EventSource { get; set; }

        /// <summary>
        /// Set the sourcetype value to assign to the event data.
        /// </summary>
        [Input("eventSourcetype")]
        public Input<string>? EventSourcetype { get; set; }

        /// <summary>
        /// Set a record key that will populate 'sourcetype'. If the key is found, it will have precedence over the value set in event_sourcetype.
        /// </summary>
        [Input("eventSourcetypeKey")]
        public Input<string>? EventSourcetypeKey { get; set; }

        /// <summary>
        /// IP address or hostname of the target OpenSearch instance, default `127.0.0.1`
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Buffer size used to receive Splunk HTTP responses: Default `2M`
        /// </summary>
        [Input("httpBufferSize")]
        public Input<string>? HttpBufferSize { get; set; }

        /// <summary>
        /// If the HTTP server response code is 400 (bad request) and this flag is enabled, it will print the full HTTP request and response to the stdout interface. This feature is available for debugging purposes.
        /// </summary>
        [Input("httpDebugBadRequest")]
        public Input<bool>? HttpDebugBadRequest { get; set; }

        /// <summary>
        /// Password for user defined in HTTP_User
        /// </summary>
        [Input("httpPassword")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2.ClusterOutputSpecSplunkHttppasswordArgs>? HttpPassword { get; set; }

        /// <summary>
        /// Optional username credential for access
        /// </summary>
        [Input("httpUser")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2.ClusterOutputSpecSplunkHttpuserArgs>? HttpUser { get; set; }

        /// <summary>
        /// TCP port of the target Splunk instance, default `8088`
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// When enabled, the record keys and values are set in the top level of the map instead of under the event key. Refer to the Sending Raw Events section from the docs more details to make this option work properly.
        /// </summary>
        [Input("splunkSendRaw")]
        public Input<bool>? SplunkSendRaw { get; set; }

        /// <summary>
        /// Specify the Authentication Token for the HTTP Event Collector interface.
        /// </summary>
        [Input("splunkToken")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2.ClusterOutputSpecSplunkSplunktokenArgs>? SplunkToken { get; set; }

        /// <summary>
        /// Fluent Bit provides integrated support for Transport Layer Security (TLS) and it predecessor Secure Sockets Layer (SSL) respectively.
        /// </summary>
        [Input("tls")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Fluentbit.V1Alpha2.ClusterOutputSpecSplunkTlsArgs>? Tls { get; set; }

        public ClusterOutputSpecSplunkArgs()
        {
        }
        public static new ClusterOutputSpecSplunkArgs Empty => new ClusterOutputSpecSplunkArgs();
    }
}
