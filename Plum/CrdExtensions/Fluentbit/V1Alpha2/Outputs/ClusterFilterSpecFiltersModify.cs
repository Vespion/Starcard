// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Modify defines Modify Filter configuration.
    /// </summary>
    [OutputType]
    public sealed class ClusterFilterSpecFiltersModify
    {
        /// <summary>
        /// Alias for the plugin
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// All conditions have to be true for the rules to be applied.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2.ClusterFilterSpecFiltersModifyConditions> Conditions;
        /// <summary>
        /// RetryLimit describes how many times fluent-bit should retry to send data to a specific output. If set to false fluent-bit will try indefinetly. If set to any integer N&gt;0 it will try at most N+1 times. Leading zeros are not allowed (values such as 007, 0150, 01 do not work). If this property is not defined fluent-bit will use the default value: 1.
        /// </summary>
        public readonly string RetryLimit;
        /// <summary>
        /// Rules are applied in the order they appear, with each rule operating on the result of the previous rule.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2.ClusterFilterSpecFiltersModifyRules> Rules;

        [OutputConstructor]
        private ClusterFilterSpecFiltersModify(
            string alias,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2.ClusterFilterSpecFiltersModifyConditions> conditions,

            string retryLimit,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2.ClusterFilterSpecFiltersModifyRules> rules)
        {
            Alias = alias;
            Conditions = conditions;
            RetryLimit = retryLimit;
            Rules = rules;
        }
    }
}
