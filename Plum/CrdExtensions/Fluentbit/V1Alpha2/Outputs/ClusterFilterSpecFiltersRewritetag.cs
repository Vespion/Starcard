// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// RewriteTag defines a RewriteTag configuration.
    /// </summary>
    [OutputType]
    public sealed class ClusterFilterSpecFiltersRewritetag
    {
        /// <summary>
        /// Alias for the plugin
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// When the filter emits a record under the new Tag, there is an internal emitter plugin that takes care of the job. Since this emitter expose metrics as any other component of the pipeline, you can use this property to configure an optional name for it.
        /// </summary>
        public readonly string EmitterName;
        /// <summary>
        /// RetryLimit describes how many times fluent-bit should retry to send data to a specific output. If set to false fluent-bit will try indefinetly. If set to any integer N&gt;0 it will try at most N+1 times. Leading zeros are not allowed (values such as 007, 0150, 01 do not work). If this property is not defined fluent-bit will use the default value: 1.
        /// </summary>
        public readonly string RetryLimit;
        /// <summary>
        /// Defines the matching criteria and the format of the Tag for the matching record. The Rule format have four components: KEY REGEX NEW_TAG KEEP.
        /// </summary>
        public readonly ImmutableArray<string> Rules;

        [OutputConstructor]
        private ClusterFilterSpecFiltersRewritetag(
            string alias,

            string emitterName,

            string retryLimit,

            ImmutableArray<string> rules)
        {
            Alias = alias;
            EmitterName = emitterName;
            RetryLimit = retryLimit;
            Rules = rules;
        }
    }
}
