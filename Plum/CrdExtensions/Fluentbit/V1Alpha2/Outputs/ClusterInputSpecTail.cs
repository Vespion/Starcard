// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Tail defines Tail Input configuration.
    /// </summary>
    [OutputType]
    public sealed class ClusterInputSpecTail
    {
        /// <summary>
        /// Set the initial buffer size to read files data. This value is used too to increase buffer size. The value must be according to the Unit Size specification.
        /// </summary>
        public readonly string BufferChunkSize;
        /// <summary>
        /// Set the limit of the buffer size per monitored file. When a buffer needs to be increased (e.g: very long lines), this value is used to restrict how much the memory buffer can grow. If reading a file exceed this limit, the file is removed from the monitored file list The value must be according to the Unit Size specification.
        /// </summary>
        public readonly string BufferMaxSize;
        /// <summary>
        /// Specify the database file to keep track of monitored files and offsets.
        /// </summary>
        public readonly string Db;
        /// <summary>
        /// Set a default synchronization (I/O) method. Values: Extra, Full, Normal, Off.
        /// </summary>
        public readonly string DbSync;
        /// <summary>
        /// DisableInotifyWatcher will disable inotify and use the file stat watcher instead.
        /// </summary>
        public readonly bool DisableInotifyWatcher;
        /// <summary>
        /// If enabled, the plugin will recombine split Docker log lines before passing them to any parser as configured above. This mode cannot be used at the same time as Multiline.
        /// </summary>
        public readonly bool DockerMode;
        /// <summary>
        /// Wait period time in seconds to flush queued unfinished split lines.
        /// </summary>
        public readonly int DockerModeFlushSeconds;
        /// <summary>
        /// Specify an optional parser for the first line of the docker multiline mode. The parser name to be specified must be registered in the parsers.conf file.
        /// </summary>
        public readonly string DockerModeParser;
        /// <summary>
        /// Set one or multiple shell patterns separated by commas to exclude files matching a certain criteria, e.g: exclude_path=*.gz,*.zip
        /// </summary>
        public readonly string ExcludePath;
        /// <summary>
        /// Ignores records which are older than this time in seconds. Supports m,h,d (minutes, hours, days) syntax. Default behavior is to read all records from specified files. Only available when a Parser is specificied and it can parse the time of a record.
        /// </summary>
        public readonly string IgnoredOlder;
        /// <summary>
        /// When a message is unstructured (no parser applied), it's appended as a string under the key name log. This option allows to define an alternative name for that key.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// Set a limit of memory that Tail plugin can use when appending data to the Engine. If the limit is reach, it will be paused; when the data is flushed it resumes.
        /// </summary>
        public readonly string MemBufLimit;
        /// <summary>
        /// If enabled, the plugin will try to discover multiline messages and use the proper parsers to compose the outgoing messages. Note that when this option is enabled the Parser option is not used.
        /// </summary>
        public readonly bool Multiline;
        /// <summary>
        /// Wait period time in seconds to process queued multiline messages
        /// </summary>
        public readonly int MultilineFlushSeconds;
        /// <summary>
        /// This will help to reassembly multiline messages originally split by Docker or CRI Specify one or Multiline Parser definition to apply to the content.
        /// </summary>
        public readonly string MultilineParser;
        /// <summary>
        /// Specify the name of a parser to interpret the entry as a structured message.
        /// </summary>
        public readonly string Parser;
        /// <summary>
        /// Name of the parser that matchs the beginning of a multiline message. Note that the regular expression defined in the parser must include a group name (named capture)
        /// </summary>
        public readonly string ParserFirstline;
        /// <summary>
        /// Optional-extra parser to interpret and structure multiline entries. This option can be used to define multiple parsers.
        /// </summary>
        public readonly ImmutableArray<string> ParserN;
        /// <summary>
        /// Pattern specifying a specific log files or multiple ones through the use of common wildcards.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// If enabled, it appends the name of the monitored file as part of the record. The value assigned becomes the key in the map.
        /// </summary>
        public readonly string PathKey;
        /// <summary>
        /// For new discovered files on start (without a database offset/position), read the content from the head of the file, not tail.
        /// </summary>
        public readonly bool ReadFromHead;
        /// <summary>
        /// The interval of refreshing the list of watched files in seconds.
        /// </summary>
        public readonly int RefreshIntervalSeconds;
        /// <summary>
        /// Specify the number of extra time in seconds to monitor a file once is rotated in case some pending data is flushed.
        /// </summary>
        public readonly int RotateWaitSeconds;
        /// <summary>
        /// When a monitored file reach it buffer capacity due to a very long line (Buffer_Max_Size), the default behavior is to stop monitoring that file. Skip_Long_Lines alter that behavior and instruct Fluent Bit to skip long lines and continue processing other lines that fits into the buffer size.
        /// </summary>
        public readonly bool SkipLongLines;
        /// <summary>
        /// Set a tag (with regex-extract fields) that will be placed on lines read. E.g. kube.&lt;namespace_name&gt;.&lt;pod_name&gt;.&lt;container_name&gt;
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// Set a regex to exctract fields from the file
        /// </summary>
        public readonly string TagRegex;

        [OutputConstructor]
        private ClusterInputSpecTail(
            string bufferChunkSize,

            string bufferMaxSize,

            string db,

            string dbSync,

            bool disableInotifyWatcher,

            bool dockerMode,

            int dockerModeFlushSeconds,

            string dockerModeParser,

            string excludePath,

            string ignoredOlder,

            string key,

            string memBufLimit,

            bool multiline,

            int multilineFlushSeconds,

            string multilineParser,

            string parser,

            string parserFirstline,

            ImmutableArray<string> parserN,

            string path,

            string pathKey,

            bool readFromHead,

            int refreshIntervalSeconds,

            int rotateWaitSeconds,

            bool skipLongLines,

            string tag,

            string tagRegex)
        {
            BufferChunkSize = bufferChunkSize;
            BufferMaxSize = bufferMaxSize;
            Db = db;
            DbSync = dbSync;
            DisableInotifyWatcher = disableInotifyWatcher;
            DockerMode = dockerMode;
            DockerModeFlushSeconds = dockerModeFlushSeconds;
            DockerModeParser = dockerModeParser;
            ExcludePath = excludePath;
            IgnoredOlder = ignoredOlder;
            Key = key;
            MemBufLimit = memBufLimit;
            Multiline = multiline;
            MultilineFlushSeconds = multilineFlushSeconds;
            MultilineParser = multilineParser;
            Parser = parser;
            ParserFirstline = parserFirstline;
            ParserN = parserN;
            Path = path;
            PathKey = pathKey;
            ReadFromHead = readFromHead;
            RefreshIntervalSeconds = refreshIntervalSeconds;
            RotateWaitSeconds = rotateWaitSeconds;
            SkipLongLines = skipLongLines;
            Tag = tag;
            TagRegex = tagRegex;
        }
    }
}
