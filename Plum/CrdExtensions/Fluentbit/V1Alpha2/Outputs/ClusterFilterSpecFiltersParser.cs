// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Fluentbit.V1Alpha2
{

    /// <summary>
    /// Parser defines Parser Filter configuration.
    /// </summary>
    [OutputType]
    public sealed class ClusterFilterSpecFiltersParser
    {
        /// <summary>
        /// Alias for the plugin
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// Specify field name in record to parse.
        /// </summary>
        public readonly string KeyName;
        /// <summary>
        /// Specify the parser name to interpret the field. Multiple Parser entries are allowed (split by comma).
        /// </summary>
        public readonly string Parser;
        /// <summary>
        /// Keep original Key_Name field in the parsed result. If false, the field will be removed.
        /// </summary>
        public readonly bool PreserveKey;
        /// <summary>
        /// Keep all other original fields in the parsed result. If false, all other original fields will be removed.
        /// </summary>
        public readonly bool ReserveData;
        /// <summary>
        /// RetryLimit describes how many times fluent-bit should retry to send data to a specific output. If set to false fluent-bit will try indefinetly. If set to any integer N&gt;0 it will try at most N+1 times. Leading zeros are not allowed (values such as 007, 0150, 01 do not work). If this property is not defined fluent-bit will use the default value: 1.
        /// </summary>
        public readonly string RetryLimit;
        /// <summary>
        /// If the key is a escaped string (e.g: stringify JSON), unescape the string before to apply the parser.
        /// </summary>
        public readonly bool UnescapeKey;

        [OutputConstructor]
        private ClusterFilterSpecFiltersParser(
            string alias,

            string keyName,

            string parser,

            bool preserveKey,

            bool reserveData,

            string retryLimit,

            bool unescapeKey)
        {
            Alias = alias;
            KeyName = keyName;
            Parser = parser;
            PreserveKey = preserveKey;
            ReserveData = reserveData;
            RetryLimit = retryLimit;
            UnescapeKey = unescapeKey;
        }
    }
}
